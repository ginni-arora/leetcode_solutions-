class Solution {
public:
void backtrack(vector<int>& nums, vector<vector<int>>& res, vector<int>& perm, vector<bool>& used) {
    if (perm.size() == nums.size()) {
        res.push_back(perm);
        return;
    }
    for (int i = 0; i < nums.size(); ++i) {
        if (used[i] || (i > 0 && nums[i] == nums[i - 1] && !used[i - 1])) continue;
        used[i] = true;
        perm.push_back(nums[i]);
        backtrack(nums, res, perm, used);
        perm.pop_back();
        used[i] = false;
    }
}

    vector<vector<int>> permuteUnique(vector<int>& nums) {
        sort(nums.begin(), nums.end());
    vector<vector<int>> res;
    vector<int> perm;
    vector<bool> used(nums.size(), false);
    backtrack(nums, res, perm, used);
    return res;
    }
};
