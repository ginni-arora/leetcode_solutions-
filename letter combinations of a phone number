class Solution {
public:
    vector<string> letterCombinations(string digits) {
        
        if (digits.empty()) return {};
        
        vector<string> res;
        string current;
        vector<string> mappings = {
            "",    // 0
            "",    // 1
            "abc", // 2
            "def", // 3
            "ghi", // 4
            "jkl", // 5
            "mno", // 6
            "pqrs", // 7
            "tuv", // 8
            "wxyz" // 9
        };
        
        backtrack(digits, 0, current, res, mappings);
        return res;
    }
    
private:
    void backtrack(const string& digits, int index, string& current, vector<string>& res, const vector<string>& mappings) {
        if (index == digits.size()) {
            res.push_back(current);
            return;
        }
        
        string letters = mappings[digits[index] - '0'];
        for (char letter : letters) {
            current.push_back(letter);
            backtrack(digits, index + 1, current, res, mappings);
            current.pop_back();
        }
    }
};
   
